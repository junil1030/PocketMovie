# .github/workflows/iOS-CI.yml
name: iOS CI Pipeline

# 트리거 조건
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    
# 환경 변수 설정
env:
  XCODE_VERSION: '16.2'
  IOS_SIMULATOR: 'iPhone 16'
  IOS_VERSION: '18.3'

jobs:
  # 1단계: 빌드 체크
  build:
    name: Build Check
    runs-on: macos-13
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Build Project
      run: |
        xcodebuild clean build \
          -project PocketMovie.xcodeproj \
          -scheme PocketMovie \
          -destination 'platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}' \
          CODE_SIGNING_ALLOWED=NO
          
  # 2단계: 유닛 테스트
  unit-tests:
    name: Unit Tests
    runs-on: macos-13
    needs: build
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    # API 키들을 환경변수로 설정
    - name: Setup Environment Variables
      run: |
        echo "TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" >> $GITHUB_ENV
        echo "KOBIS_API_KEY=${{ secrets.KOBIS_API_KEY }}" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
    
    - name: Run Unit Tests
      run: |
        xcodebuild test \
          -project PocketMovie.xcodeproj \
          -scheme PocketMovie \
          -destination 'platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}' \
          -only-testing:PocketMovieTests \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults-Unit.xcresult
    
    # 테스트 결과 업로드
    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-results
        path: TestResults-Unit.xcresult
        retention-days: 7

# 3단계: UI 테스트
  ui-tests:
    name: UI Tests
    runs-on: macos-13
    needs: build
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Setup Environment Variables
      run: |
        echo "TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" >> $GITHUB_ENV
        echo "KOBIS_API_KEY=${{ secrets.KOBIS_API_KEY }}" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
    
    - name: Prepare Simulator
      run: |
        xcrun simctl list devices available
        xcrun simctl boot "${{ env.IOS_SIMULATOR }}" || true
        xcrun simctl bootstatus "${{ env.IOS_SIMULATOR }}" -b
    
    - name: Run UI Tests
      run: |
        xcodebuild test \
          -project PocketMovie.xcodeproj \
          -scheme PocketMovie \
          -destination 'platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}' \
          -only-testing:PocketMovieUITests \
          -resultBundlePath TestResults-UI.xcresult
    
    - name: Upload UI Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ui-test-results
        path: TestResults-UI.xcresult
        retention-days: 7

  # 4단계: Slack 알림
  notify-results:
    name: Notify Results
    runs-on: macos-13
    needs: [build, unit-tests, ui-tests]
    if: always()  # 성공/실패 관계없이 실행
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Get Test Results Summary
      id: test-summary
      run: |
        # 간단한 결과 요약 생성
        if [[ "${{ needs.build.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.ui-tests.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=모든 빌드와 테스트가 성공했습니다! ✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=빌드 또는 테스트가 실패했습니다. ❌" >> $GITHUB_OUTPUT
        fi
        
        # 각 단계별 상태 체크
        echo "build_status=${{ needs.build.result }}" >> $GITHUB_OUTPUT
        echo "unit_test_status=${{ needs.unit-tests.result }}" >> $GITHUB_OUTPUT
        echo "ui_test_status=${{ needs.ui-tests.result }}" >> $GITHUB_OUTPUT
    
    - name: Send Success Notification to Slack
      if: steps.test-summary.outputs.status == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#ios-builds'
        username: 'PocketMovie Bot'
        icon_emoji: ':iphone:'
        title: '✅ PocketMovie 빌드 성공!'
        fields: |
          [
            {
              "title": "브랜치",
              "value": "${{ github.ref_name }}",
              "short": true
            },
            {
              "title": "커밋",
              "value": "${{ github.sha }}",
              "short": true
            },
            {
              "title": "작성자",
              "value": "${{ github.actor }}",
              "short": true
            },
            {
              "title": "빌드 시간",
              "value": "${{ github.run_number }}",
              "short": true
            }
          ]
        text: |
          🎉 모든 테스트가 통과했습니다!
          
          📱 **빌드**: ${{ steps.test-summary.outputs.build_status }}
          🧪 **유닛 테스트**: ${{ steps.test-summary.outputs.unit_test_status }}
          🎭 **UI 테스트**: ${{ steps.test-summary.outputs.ui_test_status }}
          
          <${{ github.event.head_commit.url }}|커밋 확인하기>
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Send Failure Notification to Slack
      if: steps.test-summary.outputs.status == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#ios-builds'
        username: 'PocketMovie Bot'
        icon_emoji: ':warning:'
        title: '❌ PocketMovie 빌드 실패'
        fields: |
          [
            {
              "title": "브랜치",
              "value": "${{ github.ref_name }}",
              "short": true
            },
            {
              "title": "커밋",
              "value": "${{ github.sha }}",
              "short": true
            },
            {
              "title": "작성자",
              "value": "${{ github.actor }}",
              "short": true
            },
            {
              "title": "실패한 Job",
              "value": "${{ steps.test-summary.outputs.message }}",
              "short": false
            }
          ]
        text: |
          🚨 빌드 또는 테스트에서 문제가 발생했습니다.
          
          📱 **빌드**: ${{ steps.test-summary.outputs.build_status }}
          🧪 **유닛 테스트**: ${{ steps.test-summary.outputs.unit_test_status }}
          🎭 **UI 테스트**: ${{ steps.test-summary.outputs.ui_test_status }}
          
          <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|로그 확인하기>
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


          
